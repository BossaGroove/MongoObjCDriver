//
//  main.m
//  test
//
//  Created by Jérôme Lebel on 17/10/2014.
//
//

#import <Foundation/Foundation.h>
#import <MongoObjCDriver/mongoc.h>
#import <MongoObjCDriver/MongoObjCDriver-private.h>

#define MYMALLOC 0
#define PRINT(x...)  printf(x);

void testMalloc(void);
void getBson(void);

#if MYMALLOC
static int currentMark = 0;

typedef struct _Node {
    void *pointer;
    int mark;
    size_t size;
    struct _Node *next;
    struct _Node *previous;
} Node;

Node *firstNode = NULL;

static Node * findNodeForPointer(void *pointer)
{
    Node *cursor = firstNode;
    
    while (cursor != NULL && cursor->pointer != pointer) {
        cursor = cursor->next;
    }
    return cursor;
}

static Node * addNode(void *pointer, size_t size)
{
    Node *newNode = malloc(sizeof(Node));
    
    newNode->pointer = pointer;
    newNode->size = size;
    newNode->next = firstNode;
    newNode->previous = NULL;
    newNode->mark = currentMark;
    
    if (firstNode) {
        firstNode->previous = newNode;
    }
    firstNode = newNode;
    
    return newNode;
}

static void removeNode(Node *node)
{
    if (node->previous != NULL) {
        node->previous->next = node->next;
    } else {
        assert(node == firstNode);
        firstNode = node->next;
    }
    if (node->next != NULL) {
        node->next->previous = node->previous;
    }
    free(node);
}

static void *mymalloc(size_t size)
{
    void *result = malloc(size);
    
    addNode(result, size);
    PRINT("malloc %p\n", result);
    return result;
}

static void *mycalloc(size_t n_members, size_t size)
{
    void *result = malloc(n_members * size);
    
    addNode(result, n_members * size);
    PRINT("malloc %p\n", result);
    return result;
}

static void *myrealloc(void *pointer, size_t size)
{
    Node *node;
    
    if (pointer) {
        node = findNodeForPointer(pointer);
        assert(node != NULL);
    } else {
        node = addNode(NULL, size);
    }
    PRINT("realloc from %p to %p\n", pointer, node->pointer);
    node->pointer = reallocf(pointer, size);
    return node->pointer;
}

static void myfree(void *pointer)
{
    PRINT("free %p\n", pointer);
    free(pointer);
    if (pointer) {
        Node *node = findNodeForPointer(pointer);
        
        assert(node != NULL);
        removeNode(node);
    }
}

static void printNodeAfterMark(int mark)
{
    Node *cursor = firstNode;
    
    while (cursor != NULL) {
        if (cursor->mark > mark) {
            printf("buffer %p\n", cursor->pointer);
        }
        cursor = cursor->next;
    }
}

void testMalloc(void)
{
    mongoc_client_t *client;
    mongoc_database_t *database;
    bson_t *infos;
    bson_error_t bsonError;
    bson_oid_t oid;
    
#if MYMALLOC
    bson_mem_vtable_t vtable = { mymalloc, mycalloc, myrealloc, myfree };
    
    bson_mem_set_vtable (&vtable);
#endif
    
    bson_oid_init_from_string(&oid, "5126bc054aed4daf9e2ab772");
    
    client = mongoc_client_new("mongodb://192.168.174.202");
    database = mongoc_client_get_database(client, "test");
    currentMark = 1;
    infos = mongoc_database_get_collection_info (database, NULL, &bsonError);
    if (infos) {
        bson_destroy(infos);
    }
    mongoc_database_destroy(database);
    mongoc_client_destroy(client);
    printf("----\n");
    printNodeAfterMark(-1);
}
#endif

const char *bufferString = "c7110000 075f6964 00535f64 d1e26daf 03320000 44076368 616e6e65 6c496400 527446eb 99930c77 777862a4 07636f6d 70616e79 49640052 9911b72a d6214573 00000502 6e616d65 00060000 004d6169 6e7a0003 61726561 00231100 00027479 70650008 00000050 6f6c7967 6f6e0004 636f6f72 64696e61 74657300 ff100000 043000f7 10000004 30001b00 00000130 00000000 e0755d20 40013100 59a436e2 cb004940 00043100 1b000000 01300000 000060f1 61204001 3100b6f0 94d37e01 49400004 32001b00 00000130 00ffffff 3f896220 40013100 61affb84 df014940 00043300 1b000000 013000ff ffffff8b 63204001 3100d9aa 6d1f1202 49400004 34001b00 00000130 00000000 80566420 40013100 7542ea31 24024940 00043500 1b000000 01300000 0000c053 63204001 3100536e 613a7802 49400004 36001b00 00000130 00000000 80c16220 40013100 0046b538 c3024940 00043700 1b000000 01300000 0000c023 66204001 3100e332 74b6da02 49400004 38001b00 00000130 00000000 e03f6620 40013100 a66413ce 40034940 00043900 1b000000 01300000 0000a0e8 66204001 3100329d b4f28003 49400004 3130001b 00000001 30000000 00c06c68 20400131 00f94598 75690349 40000431 31001b00 00000130 00000000 00786820 40013100 a9670967 8f034940 00043132 001b0000 00013000 00000000 2f662040 013100fe e2984fac 03494000 04313300 1b000000 01300000 0000c023 66204001 3100405a 250fd403 49400004 3134001b 00000001 30000000 00a08362 20400131 0045dbf1 9cfd0349 40000431 35001b00 00000130 00000000 406d6020 40013100 c57373c7 2a044940 00043136 001b0000 00013000 000000c0 dd602040 0131001e 0e252356 04494000 04313700 1b000000 01300000 000080ff 60204001 31004660 a65d9504 49400004 3138001b 00000001 30000000 00c0c965 20400131 001ebd01 f2730449 40000431 39001b00 00000130 00000000 203a6820 40013100 8983367e 65044940 00043230 001b0000 00013000 00000080 3f6c2040 013100cf ef7d334c 04494000 04323100 1b000000 01300000 0000602e 70204001 31009137 fde71604 49400004 3232001b 00000001 30000000 0020a773 20400131 00328d73 6bff0349 40000432 33001b00 00000130 00000000 00887620 40013100 fedd7a42 0a044940 00043234 001b0000 00013000 00000040 9e7a2040 01310089 dd5d59d1 03494000 04323500 1b000000 01300000 000040f5 7d204001 310047bf e33c7e03 49400004 3236001b 00000001 30000000 00809282 20400131 008fd5e7 d5c60249 40000432 37001b00 00000130 00000000 c0868a20 40013100 ff0f5158 83014940 00043238 001b0000 00013000 000000e0 458d2040 013100c0 df7ec30e 01494000 04323900 1b000000 01300000 0000a091 90204001 3100f817 00c8e1ff 48400004 3330001b 00000001 30000000 00c03194 20400131 0085eb27 0249ff48 40000433 31001b00 00000130 00000000 800f9c20 40013100 d881f0d7 1cfe4840 00043332 001b0000 00013000 000000a0 a19e2040 013100f8 e396d0ab fd484000 04333300 1b000000 01300000 0000e05a a5204001 3100ef89 08636efc 48400004 3334001b 00000001 30000000 00009eab 20400131 0020393c 19bdfa48 40000433 35001b00 00000130 00000000 0022af20 40013100 2b084f2d 40f94840 00043336 001b0000 00013000 00000020 11af2040 013100f5 387a5b50 f8484000 04333700 1b000000 01300000 0000c035 ae204001 3100517a 3d3648f8 48400004 3338001b 00000001 30000000 00a084ac 20400131 0044d6af f840f848 40000433 39001b00 00000130 00000000 c0b1aa20 40013100 eb95fd32 22f84840 00043430 001b0000 00013000 ffffff3f eaa62040 01310080 aaa4bc01 f9484000 04343100 1b000000 01300000 0000600c a1204001 3100b87d 342f8bf8 48400004 3432001b 00000001 30000000 00407a9e 20400131 005842d0 b269f848 40000434 33001b00 00000130 00000000 60969e20 40013100 7a68fd52 80f84840 00043434 001b0000 00013000 00000040 c69d2040 013100d6 fabaf183 f8484000 04343500 1b000000 01300000 0000e09e 9d204001 31002bd0 30826bf8 48400004 3436001b 00000001 30000000 0020239d 20400131 0040abb1 bf72f848 40000434 37001b00 00000130 00000000 40209e20 40013100 76dbdf39 49f94840 00043438 001b0000 00013000 00000060 e29d2040 01310066 ef3f9b45 f9484000 04343900 1b000000 01300000 000040c6 9d204001 31006232 123936f9 48400004 3530001b 00000001 30000000 00c0399b 20400131 005a486d 4652f948 40000435 31001b00 00000130 00000000 409c9a20 40013100 a831f7b0 0bf94840 00043532 001b0000 00013000 00000060 aa992040 013100b1 3d997417 f9484000 04353300 1b000000 01300000 0000607d 99204001 31003ead a2e109f9 48400004 3534001b 00000001 30000000 00e03999 20400131 003eada2 e109f948 40000435 35001b00 00000130 00000000 20189920 40013100 479d2f09 4bf94840 00043536 001b0000 00013000 00000000 a2982040 013100ce 111e7750 f9484000 04353700 1b000000 013000ff ffffff74 98204001 3100141b 5ab457f9 48400004 3538001b 00000001 30000000 00604298 20400131 00c108a3 e0f6f848 40000435 39001b00 00000130 00000000 e0a49720 40013100 9e549fb5 8ff84840 00043630 001b0000 00013000 00000000 d5922040 013100e8 51093c94 f8484000 04363100 1b000000 01300000 00008091 92204001 31003d59 30fd79f8 48400004 3632001b 00000001 30000000 0020d590 20400131 00db4a3f b47cf848 40000436 33001b00 00000130 00000000 40c49020 40013100 293b9151 6df84840 00043634 001b0000 00013000 000000a0 838f2040 01310059 83f1206f f8484000 04363500 1b000000 01300000 000020b9 8e204001 31009b6c 16ea24f8 48400004 3636001b 00000001 30000000 00205f8e 20400131 0075e38a 67caf748 40000436 37001b00 00000130 00000000 20e68e20 40013100 003e8037 63f74840 00043638 001b0000 00013000 00000040 898f2040 013100e7 9aaeee65 f7484000 04363900 1b000000 01300000 00000051 8f204001 3100735e c53d33f7 48400004 3730001b 00000001 30000000 0060108e 20400131 006cb8e0 4be6f648 40000437 31001b00 00000130 00000000 20ab8d20 40013100 56ec627c e4f64840 00043732 001b0000 00013000 00000060 9d882040 01310060 e099f646 f6484000 04373300 1b000000 013000ff ffffbf78 89204001 3100affc a846a1f5 48400004 3734001b 00000001 30000000 0040b185 20400131 00d27d98 455ef548 40000437 35001b00 00000130 00000000 00008620 40013100 07d64b05 14f54840 00043736 001b0000 00013000 00000040 d0842040 01310053 ec73aafa f4484000 04373700 1b000000 01300000 0000201c 86204001 31009382 b93e65f4 48400004 3738001b 00000001 30000000 00603884 20400131 00df6452 305cf448 40000437 39001b00 00000130 00000000 003e8420 40013100 07d71974 46f44840 00043830 001b0000 00013000 00000020 1f832040 013100f1 947f4d3e f4484000 04383100 1b000000 01300000 00008073 83204001 3100fa97 a69f31f4 48400004 3832001b 00000001 30000000 00400e83 20400131 00551ebc 09f4f348 40000438 33001b00 00000130 00000000 e08c8220 40013100 a2a9de78 f9f34840 00043834 001b0000 00013000 00000040 2d822040 01310080 e88b3ed5 f3484000 04383500 1b000000 01300000 00006095 81204001 31005045 3560caf3 48400004 3836001b 00000001 30000000 00402d82 20400131 00166719 f094f348 40000438 37001b00 00000130 00000000 e0328220 40013100 cff00d5e 6af34840 00043838 001b0000 00013000 00000060 95812040 01310033 388cbe66 f3484000 04383900 1b000000 01300000 000080b1 81204001 3100cf3d e42246f3 48400004 3930001b 00000001 30000000 00602d80 20400131 0099b39b 2629f348 40000439 31001b00 00000130 00000000 00ba8020 40013100 adb54d90 1bf34840 00043932 001b0000 00013000 000000a0 cd812040 013100e0 4f72a9cd f2484000 04393300 1b000000 01300000 00002041 7f204001 31004d54 c7d69bf2 48400004 3934001b 00000001 30000000 00805277 20400131 004e2109 c4fcf248 40000439 35001b00 00000130 00000000 c0d67620 40013100 1fb9ffd4 35f34840 00043936 001b0000 00013000 ffffff1f 88742040 01310075 ac26c62c f3484000 04393700 1b000000 01300000 00004077 74204001 3100debc 3db7d0f3 48400004 3938001b 00000001 30000000 00c01475 20400131 00c3785d 9f61f448 40000439 39001b00 00000130 00000000 c0cb7220 40013100 8d6086b7 60f44840 00043130 30001b00 00000130 00000000 801a7320 40013100 2c7ee346 bbf44840 00043130 31001b00 00000130 00000000 80af7420 40013100 8a3621e6 e7f54840 00043130 32001b00 00000130 00000000 20967520 40013100 86b55ede 47f64840 00043130 33001b00 00000130 00000000 60257920 40013100 5165f788 43f74840 00043130 34001b00 00000130 00000000 00667a20 40013100 8845da66 46f84840 00043130 35001b00 00000130 00000000 e00b7c20 40013100 60ee1fcb 68f84840 00043130 36001b00 00000130 00000000 40d97b20 40013100 abd6f1d5 13f94840 00043130 37001b00 00000130 00000000 00127420 40013100 7bf7e782 46f94840 00043130 38001b00 00000130 00000000 60697120 40013100 a5afdcaa adf94840 00043130 39001b00 00000130 00000000 20e86e20 40013100 ba0e94ac 6bfa4840 00043131 30001b00 00000130 00000000 00566c20 40013100 08dd0dc5 57fa4840 00043131 31001b00 00000130 00000000 80536720 40013100 775f70a0 62fa4840 00043131 32001b00 00000130 00000000 00516220 40013100 49b54f9f caf94840 00043131 33001b00 00000130 00000000 a0ee6020 40013100 86ab61f4 bdf94840 00043131 34001b00 00000130 00000000 20435f20 40013100 89f8913e 8cfa4840 00043131 35001b00 00000130 00000000 00ec5d20 40013100 e1aa5be4 43fb4840 00043131 36001b00 00000130 00000000 c03a5e20 40013100 48856499 6cfb4840 00043131 37001b00 00000130 00000000 c0f15b20 40013100 4cef5632 cffb4840 00043131 38001b00 00000130 00000000 60de5620 40013100 f92fa834 a9fb4840 00043131 39001b00 00000130 00000000 c01f4c20 40013100 12b22af0 4cfb4840 00043132 30001b00 00000130 00000000 c0114b20 40013100 44d60580 80fb4840 00043132 31001b00 00000130 00000000 a07f4820 40013100 a8d5062a 8dfb4840 00043132 32001b00 00000130 00000000 80094820 40013100 579c6c2e 08fc4840 00043132 33001b00 00000130 00000000 c08a4a20 40013100 6f2f40a7 16fc4840 00043132 34001b00 00000130 00000000 a0604920 40013100 1ac22c45 a8fc4840 00043132 35001b00 00000130 00000000 20f04820 40013100 ab4c453f 49fd4840 00043132 36001b00 00000130 00000000 002e4920 40013100 724aeaa4 dcfd4840 00043132 37001b00 00000130 00000000 a0224b20 40013100 ec87ade2 25fe4840 00043132 38001b00 00000130 00000000 00df4c20 40013100 0c63b0c0 5ffe4840 00043132 39001b00 00000130 00000000 e0574e20 40013100 73d71bf9 79fe4840 00043133 30001b00 00000130 00000000 000c4d20 40013100 d434dd4b 46ff4840 00043133 31001b00 00000130 00000000 40415020 40013100 be42dac4 83ff4840 00043133 32001b00 00000130 00000000 607c4f20 40013100 5ea297e0 e0ff4840 00043133 33001b00 00000130 00000000 a0874f20 40013100 a55c51e2 3e004940 00043133 34001b00 00000130 00000000 20225320 40013100 a0770d8a 7a004940 00043133 35001b00 00000130 00000000 201f5620 40013100 f3f621c5 81004940 00043133 36001b00 00000130 00000000 80275720 40013100 01267071 7b004940 00043133 37001b00 00000130 00000000 60325d20 40013100 63fcd6fa ca004940 00043133 38001b00 00000130 00000000 e0755d20 40013100 59a436e2 cb004940 00000000 02636f6c 6f720008 00000023 30304142 38340003 74696d65 7374616d 7073002b 00000009 63726561 74656441 740029d1 a1ac4501 00000975 70646174 65644174 0029d1a1 ac450100 000000";

static unsigned char byteFromChar(char c)
{
    if (c >= '0' && c <= '9') {
        return c - '0';
    } else if (c >= 'a' && c <= 'f') {
        return c - 'a' + 10;
    } else if (c >= 'A' && c <= 'F') {
        return c - 'A' + 10;
    } else {
        return 0xFF;
    }
}

static NSData *hexaToData(const char *hexaString)
{
    NSMutableData *result = [NSMutableData data];
    
    while (hexaString[0] != 0) {
        unsigned char byte;
        unsigned char tmp;
        
        while ((tmp = byteFromChar(hexaString[0])) == 0xFF) {
            hexaString++;
        }
        byte = tmp << 4;
        hexaString++;
        while ((tmp = byteFromChar(hexaString[0])) == 0xFF) {
            hexaString++;
        }
        byte |= tmp;
        hexaString++;
        [result appendBytes:&byte length:1];
    }
    return result;
}

void getBson()
{
    NSData *data = hexaToData(bufferString);
    bson_t *bson;
    MODSortedDictionary *dict;
    bson_iter_t iter1, iter2;
    id value;
    double doubleValue;
    mongoc_client_t *client;
    mongoc_database_t *database;
    mongoc_collection_t *collection;
    
    bson = bson_new_from_data(data.bytes, data.length);
    dict = [MODClient objectFromBson:bson];
    // area.coordinates.0.75.0
    NSLog(@"%@", [dict objectForKey:@"area"]);
    value = [dict objectForKey:@"area"];
    NSLog(@"value %@", value);
    value = [value objectForKey:@"coordinates"];
    NSLog(@"value %@", value);
    value = [value objectAtIndex:0];
    NSLog(@"value %@", value);
    value = [value objectAtIndex:75];
    NSLog(@"value %@", value);
    
//    NSLog(@"%@", bson_iter_init_find(&iter1, bson, "area")?@"ok":@"nok");
    bson_iter_init(&iter1, bson);
    NSLog(@"%@", bson_iter_find_descendant(&iter1, "area.coordinates.0.75.0", &iter2)?@"ok":@"nok");
    NSLog(@"%d", bson_iter_type(&iter2));
    doubleValue = bson_iter_double(&iter2);
    NSLog(@"%f", doubleValue);
    NSLog(@"%@", [NSNumber numberWithDouble:doubleValue]);
    NSLog(@"%ld", sizeof(double));
    NSLog(@"%@", [NSData dataWithBytes:&doubleValue length:sizeof(doubleValue)]);
    doubleValue = 8.26171875;
    NSLog(@"%@", [NSData dataWithBytes:&doubleValue length:sizeof(doubleValue)]);
    NSLog(@"%@", [NSNumber numberWithDouble:8.26171875]);
    doubleValue = [[NSNumber numberWithDouble:8.26171875] doubleValue];
    NSLog(@"%@", [NSData dataWithBytes:&doubleValue length:sizeof(doubleValue)]);
    
    client = mongoc_client_new("mongodb://192.168.174.202");
    database = mongoc_client_get_database(client, "test");
    collection = mongoc_database_get_collection(database, "test");
    mongoc_collection_insert(collection, 0, bson, nil, nil);
}

int main(int argc, const char * argv[])
{
    getBson();
    return 0;
}
