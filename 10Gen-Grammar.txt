/*
    A Grammar for JSON.
*/

@start
@before {
        self.tokenizer.numberState.allowsScientificNotation = YES;
}                    = Empty | arrayElement | objectElement;

objectElement        = openCurlyToken objectContentElement closeCurlyToken;
objectContentElement = Empty | actualObjectElement;
actualObjectElement  = propertyElement commaPropertyElement*;
propertyElement      = propertyNameElement colonToken valueElement;
commaPropertyElement = commaToken propertyElement;
propertyNameElement  = quotedStringToken | wordToken;         // NOTE: property names are quoted in JSON

arrayElement         = openBracketToken arrayContentElement closeBracketToken;
arrayContentElement  = Empty | actualArrayElement;
actualArrayElement   = valueElement commaValueElement*;
commaValueElement    = commaToken valueElement;

dateElement          = jsnewToken dateToken openParentheseToken quotedStringToken? closeParentheseToken;

symbolElement        = symbolToken openParentheseToken quotedStringToken closeParentheseToken;

dataElement          = binDataToken openParentheseToken numberToken quotedStringToken closeParentheseToken;

timestampElement     = timestampToken openParentheseToken numberToken commaToken numberToken closeParentheseToken;

valueElement         = nullToken | trueToken | falseToken | arrayElement | objectElement | numberToken | quotedStringToken | undefinedToken | objectIdElement | minKeyToken | maxKeyToken | symbolElement | dateElement | dataElement | timestampElement | regexpElement;

objectIdElement      = objectIdToken openParentheseToken quotedStringToken closeParentheseToken;

regexpElement        = regexpToken;

quotedStringToken    = QuotedString;
wordToken            = Word;
numberToken          = Number;
nullToken            = 'null';
trueToken            = 'true';
falseToken           = 'false';
undefinedToken       = 'undefined';
objectIdToken        = 'ObjectId';
minKeyToken          = 'MinKey';
maxKeyToken          = 'MaxKey';
jsnewToken           = 'new';
dateToken            = 'Date';
symbolToken          = 'Symbol';
binDataToken         = 'BinData';
timestampToken       = 'Timestamp';

openCurlyToken       = '{';
closeCurlyToken      = '}';
openBracketToken     = '[';
closeBracketToken    = ']';
commaToken           = ',';
colonToken           = ':';
openParentheseToken  = '(';
closeParentheseToken = ')';
regexpToken          = %{'/', '/'};
